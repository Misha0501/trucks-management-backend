// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TruckManagement.Data;

#nullable disable

namespace TruckManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250602094034_WeekInPeriod")]
    partial class WeekInPeriod
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TruckManagement.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TruckManagement.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Postcode")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TruckManagement.Entities.Cao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CommuteMaxKilometers")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CommuteMinKilometers")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ConsignmentTaxedAllowance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ConsignmentUntaxedAllowance")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("KilometersAllowance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MultiDayAfter17Allowance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MultiDayBefore17Allowance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MultiDayTaxedAllowance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MultiDayUntaxedAllowance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("NightHoursAllowanceRate")
                        .HasColumnType("numeric");

                    b.Property<TimeSpan>("NightTimeEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("NightTimeStart")
                        .HasColumnType("interval");

                    b.Property<decimal>("ShiftMoreThan12HAllowance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("StandOverIntermediateDayUntaxed")
                        .HasColumnType("numeric");

                    b.Property<decimal>("StandardUntaxedAllowance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Caos");
                });

            modelBuilder.Entity("TruckManagement.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("TruckManagement.Entities.CarDriver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("DriverId");

                    b.ToTable("CarDrivers");
                });

            modelBuilder.Entity("TruckManagement.Entities.Charter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Charters");
                });

            modelBuilder.Entity("TruckManagement.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Postcode")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Tav")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TruckManagement.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("TruckManagement.Entities.ContactPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AspNetUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId")
                        .IsUnique();

                    b.ToTable("ContactPersons");
                });

            modelBuilder.Entity("TruckManagement.Entities.ContactPersonClientCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactPersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactPersonId");

                    b.ToTable("ContactPersonClientCompanies");
                });

            modelBuilder.Entity("TruckManagement.Entities.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AspNetUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("TruckManagement.Entities.DriverCompensationSettings", b =>
                {
                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfEmployment")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DriverRatePerHour")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("KilometerAllowance")
                        .HasColumnType("decimal(5,3)");

                    b.Property<bool>("KilometerAllowanceEnabled")
                        .HasColumnType("boolean");

                    b.Property<double>("KilometersMax")
                        .HasColumnType("double precision");

                    b.Property<double>("KilometersMin")
                        .HasColumnType("double precision");

                    b.Property<double>("KilometersOneWayValue")
                        .HasColumnType("double precision");

                    b.Property<decimal>("NightAllowanceRate")
                        .HasColumnType("decimal(5,4)");

                    b.Property<bool>("NightHours19Percent")
                        .HasColumnType("boolean");

                    b.Property<bool>("NightHoursAllowed")
                        .HasColumnType("boolean");

                    b.Property<double>("PercentageOfWork")
                        .HasColumnType("double precision");

                    b.Property<decimal>("Salary4Weeks")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("WeeklySalary")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("DriverId");

                    b.ToTable("DriverCompensationSettings");
                });

            modelBuilder.Entity("TruckManagement.Entities.EmployeeContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Atv")
                        .HasColumnType("numeric");

                    b.Property<string>("Bsn")
                        .HasColumnType("text");

                    b.Property<double?>("CommuteKilometers")
                        .HasColumnType("double precision");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("text");

                    b.Property<string>("CompanyBtw")
                        .HasColumnType("text");

                    b.Property<string>("CompanyCity")
                        .HasColumnType("text");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyKvk")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("CompanyPostcode")
                        .HasColumnType("text");

                    b.Property<decimal?>("CompensationPerMonthExclBtw")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CompensationPerMonthInclBtw")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfEmployment")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DeviatingWage")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmployeeAddress")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeCity")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeFirstName")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeLastName")
                        .HasColumnType("text");

                    b.Property<string>("EmployeePostcode")
                        .HasColumnType("text");

                    b.Property<string>("EmployerName")
                        .HasColumnType("text");

                    b.Property<string>("Function")
                        .HasColumnType("text");

                    b.Property<decimal?>("HourlyWage100Percent")
                        .HasColumnType("numeric");

                    b.Property<bool?>("KilometersAllowanceAllowed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastWorkingDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("MaxTravelExpenses")
                        .HasColumnType("numeric");

                    b.Property<bool?>("NightHoursAllowed")
                        .HasColumnType("boolean");

                    b.Property<string>("NoticePeriod")
                        .HasColumnType("text");

                    b.Property<string>("PayScale")
                        .HasColumnType("text");

                    b.Property<int?>("PayScaleStep")
                        .HasColumnType("integer");

                    b.Property<string>("ProbationPeriod")
                        .HasColumnType("text");

                    b.Property<decimal?>("ReleaseVersion")
                        .HasColumnType("numeric");

                    b.Property<string>("SignatureText")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SignedByIp")
                        .HasColumnType("text");

                    b.Property<string>("SignedFileName")
                        .HasColumnType("text");

                    b.Property<string>("SignedUserAgent")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TravelExpenses")
                        .HasColumnType("numeric");

                    b.Property<int?>("VacationAge")
                        .HasColumnType("integer");

                    b.Property<decimal?>("VacationAllowance")
                        .HasColumnType("numeric");

                    b.Property<int?>("VacationDays")
                        .HasColumnType("integer");

                    b.Property<string>("WeeklySchedule")
                        .HasColumnType("text");

                    b.Property<string>("WorkingHours")
                        .HasColumnType("text");

                    b.Property<double?>("WorkweekDuration")
                        .HasColumnType("double precision");

                    b.Property<double?>("WorkweekDurationPercentage")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DriverId");

                    b.ToTable("EmployeeContracts");
                });

            modelBuilder.Entity("TruckManagement.Entities.HoursCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HoursCodes");
                });

            modelBuilder.Entity("TruckManagement.Entities.HoursOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HoursOptions");
                });

            modelBuilder.Entity("TruckManagement.Entities.PartRide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CharterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<double>("ConsignmentFee")
                        .HasColumnType("double precision");

                    b.Property<double>("CorrectionTotalHours")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Costs")
                        .HasColumnType("numeric");

                    b.Property<string>("CostsDescription")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("DecimalHours")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("End")
                        .HasColumnType("interval");

                    b.Property<Guid?>("HoursCodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HoursOptionId")
                        .HasColumnType("uuid");

                    b.Property<double>("KilometerReimbursement")
                        .HasColumnType("double precision");

                    b.Property<double?>("Kilometers")
                        .HasColumnType("double precision");

                    b.Property<double>("NightAllowance")
                        .HasColumnType("double precision");

                    b.Property<double?>("NumberOfHours")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("PeriodApprovalId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PeriodNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Rest")
                        .HasColumnType("interval");

                    b.Property<Guid?>("RideId")
                        .HasColumnType("uuid");

                    b.Property<double>("SaturdayHours")
                        .HasColumnType("double precision");

                    b.Property<double>("StandOver")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("interval");

                    b.Property<double>("SundayHolidayHours")
                        .HasColumnType("double precision");

                    b.Property<double>("TaxFreeCompensation")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("numeric");

                    b.Property<double>("VariousCompensation")
                        .HasColumnType("double precision");

                    b.Property<int?>("WeekNrInPeriod")
                        .HasColumnType("integer");

                    b.Property<int?>("WeekNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CharterId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DriverId");

                    b.HasIndex("HoursCodeId");

                    b.HasIndex("HoursOptionId");

                    b.HasIndex("PeriodApprovalId");

                    b.HasIndex("RideId");

                    b.ToTable("PartRides");
                });

            modelBuilder.Entity("TruckManagement.Entities.PartRideApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("PartRideId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("PartRideId", "RoleId");

                    b.ToTable("PartRideApprovals");
                });

            modelBuilder.Entity("TruckManagement.Entities.PartRideComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorRoleId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PartRideId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorRoleId");

                    b.HasIndex("PartRideId");

                    b.ToTable("PartRideComments");
                });

            modelBuilder.Entity("TruckManagement.Entities.PeriodApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminPdfPath")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AdminSignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AdminSignedIp")
                        .HasColumnType("text");

                    b.Property<string>("AdminSignedUa")
                        .HasColumnType("text");

                    b.Property<Guid?>("AdminUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<string>("DriverPdfPath")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DriverSignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DriverSignedIp")
                        .HasColumnType("text");

                    b.Property<string>("DriverSignedUa")
                        .HasColumnType("text");

                    b.Property<int>("PeriodNr")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PeriodApprovals");
                });

            modelBuilder.Entity("TruckManagement.Entities.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("TruckManagement.Entities.Ride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("TruckManagement.Entities.Surcharge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Surcharges");
                });

            modelBuilder.Entity("TruckManagement.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("TruckManagement.Entities.VacationRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgeFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("AgeTo")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Right")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("VacationRights");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("TruckManagement.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TruckManagement.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TruckManagement.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("TruckManagement.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckManagement.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TruckManagement.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TruckManagement.Entities.Car", b =>
                {
                    b.HasOne("TruckManagement.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TruckManagement.Entities.CarDriver", b =>
                {
                    b.HasOne("TruckManagement.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckManagement.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TruckManagement.Entities.Charter", b =>
                {
                    b.HasOne("TruckManagement.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckManagement.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TruckManagement.Entities.Client", b =>
                {
                    b.HasOne("TruckManagement.Entities.Company", "Company")
                        .WithMany("Clients")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TruckManagement.Entities.ContactPerson", b =>
                {
                    b.HasOne("TruckManagement.Entities.ApplicationUser", "User")
                        .WithOne("ContactPerson")
                        .HasForeignKey("TruckManagement.Entities.ContactPerson", "AspNetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TruckManagement.Entities.ContactPersonClientCompany", b =>
                {
                    b.HasOne("TruckManagement.Entities.Client", "Client")
                        .WithMany("ContactPersonClientCompanies")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TruckManagement.Entities.Company", "Company")
                        .WithMany("ContactPersonClientCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TruckManagement.Entities.ContactPerson", "ContactPerson")
                        .WithMany("ContactPersonClientCompanies")
                        .HasForeignKey("ContactPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Company");

                    b.Navigation("ContactPerson");
                });

            modelBuilder.Entity("TruckManagement.Entities.Driver", b =>
                {
                    b.HasOne("TruckManagement.Entities.ApplicationUser", "User")
                        .WithOne("Driver")
                        .HasForeignKey("TruckManagement.Entities.Driver", "AspNetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckManagement.Entities.Company", "Company")
                        .WithMany("Drivers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TruckManagement.Entities.DriverCompensationSettings", b =>
                {
                    b.HasOne("TruckManagement.Entities.Driver", "Driver")
                        .WithOne("DriverCompensationSettings")
                        .HasForeignKey("TruckManagement.Entities.DriverCompensationSettings", "DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TruckManagement.Entities.EmployeeContract", b =>
                {
                    b.HasOne("TruckManagement.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("TruckManagement.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.Navigation("Company");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TruckManagement.Entities.PartRide", b =>
                {
                    b.HasOne("TruckManagement.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.HasOne("TruckManagement.Entities.Charter", "Charter")
                        .WithMany()
                        .HasForeignKey("CharterId");

                    b.HasOne("TruckManagement.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("TruckManagement.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("TruckManagement.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("TruckManagement.Entities.HoursCode", "HoursCode")
                        .WithMany("PartRides")
                        .HasForeignKey("HoursCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TruckManagement.Entities.HoursOption", "HoursOption")
                        .WithMany("PartRides")
                        .HasForeignKey("HoursOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TruckManagement.Entities.PeriodApproval", "PeriodApproval")
                        .WithMany("PartRides")
                        .HasForeignKey("PeriodApprovalId");

                    b.HasOne("TruckManagement.Entities.Ride", "Ride")
                        .WithMany("PartRides")
                        .HasForeignKey("RideId");

                    b.Navigation("Car");

                    b.Navigation("Charter");

                    b.Navigation("Client");

                    b.Navigation("Company");

                    b.Navigation("Driver");

                    b.Navigation("HoursCode");

                    b.Navigation("HoursOption");

                    b.Navigation("PeriodApproval");

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("TruckManagement.Entities.PartRideApproval", b =>
                {
                    b.HasOne("TruckManagement.Entities.ApplicationUser", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId");

                    b.HasOne("TruckManagement.Entities.PartRide", "PartRide")
                        .WithMany("Approvals")
                        .HasForeignKey("PartRideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckManagement.Entities.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("PartRide");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TruckManagement.Entities.PartRideComment", b =>
                {
                    b.HasOne("TruckManagement.Entities.ApplicationRole", "AuthorRole")
                        .WithMany()
                        .HasForeignKey("AuthorRoleId");

                    b.HasOne("TruckManagement.Entities.PartRide", "PartRide")
                        .WithMany("Comments")
                        .HasForeignKey("PartRideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorRole");

                    b.Navigation("PartRide");
                });

            modelBuilder.Entity("TruckManagement.Entities.Rate", b =>
                {
                    b.HasOne("TruckManagement.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckManagement.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TruckManagement.Entities.Ride", b =>
                {
                    b.HasOne("TruckManagement.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TruckManagement.Entities.Surcharge", b =>
                {
                    b.HasOne("TruckManagement.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckManagement.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TruckManagement.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ContactPerson");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TruckManagement.Entities.Client", b =>
                {
                    b.Navigation("ContactPersonClientCompanies");
                });

            modelBuilder.Entity("TruckManagement.Entities.Company", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("ContactPersonClientCompanies");

                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("TruckManagement.Entities.ContactPerson", b =>
                {
                    b.Navigation("ContactPersonClientCompanies");
                });

            modelBuilder.Entity("TruckManagement.Entities.Driver", b =>
                {
                    b.Navigation("DriverCompensationSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("TruckManagement.Entities.HoursCode", b =>
                {
                    b.Navigation("PartRides");
                });

            modelBuilder.Entity("TruckManagement.Entities.HoursOption", b =>
                {
                    b.Navigation("PartRides");
                });

            modelBuilder.Entity("TruckManagement.Entities.PartRide", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TruckManagement.Entities.PeriodApproval", b =>
                {
                    b.Navigation("PartRides");
                });

            modelBuilder.Entity("TruckManagement.Entities.Ride", b =>
                {
                    b.Navigation("PartRides");
                });
#pragma warning restore 612, 618
        }
    }
}
