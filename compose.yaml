version: '3.8'
services:
  truckmanagement:
    build:
      context: .
      dockerfile: TruckManagement/Dockerfile
    image: truckmanagement
    depends_on:
      postgresdb:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=${CONNECTION_STRING}
      - Smtp__Host=${SMTP_HOST}
      - Smtp__Port=${SMTP_PORT}
      - Smtp__Username=${SMTP_USERNAME}
      - Smtp__Password=${SMTP_PASSWORD}
      - Smtp__FromAddress=${SMTP_FROM_ADDRESS}
      - FrontEnd__ResetPasswordUrl=${FRONTEND_RESET_PASSWORD_URL}
      - Storage__BasePath=/app/storage
    volumes:
      - app_storage:/app/storage
    ports:
      - "9090:8080"
      - "9091:8081"

  postgresdb:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5460}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 10s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "6060:80"
    depends_on:
      - postgresdb

volumes:
  postgres_data:
  app_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/www/storage